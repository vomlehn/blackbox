Blackbox - crash logging
------------------------
Embedded systems typically have limited storage and little to no network
connectivity with which to store and report on software failures. This has
led to approaches that log critical crash information, such as stack
backtraces for retrieval after a system restart. Such facilities have
generally been done on an ad hoc basis, with each vendor developimg its
own code. Blackbox is intended to provide a common approach to this
problem. It is based on a set of experienced-based principals:

o	Systems experiencing failures must not use any more subsystems to
	store and report failure information than necessary since those
	subsystems may themselves be failing. For example, storing reports
	in a filesystem requires functioning filesystem, memory management,
	interrupt handling, and scheduler code.

	The approach is to store failure information with as few resources
	as possible, then restart the failing system. Once the system is
	again in a good state, the stored report may be retrieved, stored
	in a filesystem, and transmitted over a network. Devices used for
	log storage should be used in a polled, rather than interrupt-
	driven, mode.

o	Failing systems may fail completely during failure logging.
 
	This has two consequences:

	-	Data should not be buffered but should be stored in the
		failure log as soon as it is available, even at the cost
		of inefficiently using the log storage medium.

	-	Data that is more likely to be helpful in debugging
		failures should be logged first. This is a requirement on
		code using the failure logging system, but the that
		requirment means that the data logged must not not cause the
		loss of data logged later.
		

o	Software failures tend to cascade, with a primary failure leading to
	one or more secondary failures that won't occur without the state
	corruption caused by the primary failure.

	Information about the primary failure is absolutely more valuable
	than information about secondary failures; secondary failure
	information should be discarded if recording it would result in
	loss of primary failure information. An immediate consequence is
	that failure logs should not be circular logs, though they may
	contain information from circular logs.

o	A failure may cause partial corruption of information stored about
	that failure while leaving enough failure information intact that
	a human can decypher it.

	As a result, metadata such as length and checksum information should
	provide guidance to the retrieval of failure information but invalid
	metadata information values should not prevent reading possibly
	corrupted data.

At the top level, a fixed-size concatenation of storage space one or more
devices of the same device type. Each device is represented by two entries
in /dev:

blackbox<n>
	The <n>th blackbox device can be read at any valid offset and for
	any length. There may be one or more sections of the device that
	can't be read due to detection of data corruption. It will support
	detection and skipping of corrupted data through use of a mechanism
	like ioctl(GET_LBA_STATUS), used for SCSI disks, or the lseek
	SEEK_DATA/SEEK_HOLE mechanism.

blackboxraw<n>
	In some cases it is useful to retrieve the raw bits and metadata
	for the blocks in a blackbox device. For the device, the data
	in the block box consists of an alternating sequence of data
	blocks and metadata blocks. The data blocks are the data read from
	the device without application of error correction metatdata.  The
	metadata blocks may contain zero or more bytes of data whose format
	is dependent on the underlying device implementing the blackbox
	device. It is device dependent whether it contains any error checking
	and correction (ECC) data.

	This device is record oriented. Thus, if a read is performed on
	a data or metadata block specifying fewer bytes than are available,
	Any remaining bytes in that block are discarded and the next read
	will return data starting at the beginning of the next block. If
	the underlying device does not supply any metadata, successive
	reads will return successive data blocks; there are no zero-length
	metadatablocks.

	The device supports queries for the maximum record sizes of data and
	metadata blocks. The data returned is struct blackbox_recsize:

		struct blackbox_recsize {
			off_t	data_size;
			off_t	metadata_size;
		};
	
	The ioctl number is BBIOC_RECSIZE.
	
Each blackbox device is made of write blocks. There may be as few as 1
or there may be many. Each blackbox write block starts with a metadata section
describing that block.

Each write block starts with a header that describes the data in the write
block.  If the device requires write blocks be erased prior to writing new
data, there is only one header. If the device does not require erasing before
writing, there are two headers, both of which have the same structure. Only
one of the two headers is modified at a time. If the system fails during a
header write, that header will be invalid, which is detected with a checksum,
but the other header will still be valid, allowing the data to be retrieved.

All fields in the header are printable so that, if the data stored is printable,
it is easy to review the data in the device. This includes checksums. Algorithms
for validating checksums frequently involve computations on the entire block,
including the checksum. Since the checksum value has been converted to a
printable value, the usual approach doesn't apply. Instead, all fields except
for the checksum are included in the checksum as printable characters. The
checksum itself is then converted to binary and processed with the checksum
algorithm.

The following table describes the header fields. The data is stored in the order
in which it appears in the table.

Field		Size	Description
		(bytes)
---------------	-------	-----------------------------------------------

seqno		16	A monotonically increasing value, starting at
			one, encoded as a lower case hexadecimal value
			with leading zero padding
version		2	Version of this data, a value from "00" to "99"
offset		8	Logical offset within the blackbox device of
			this block, encoded as a leading zero-padded,
			lower case hexadecimal value
size		8	Number of bytes of data written to this block,
			encoded as a lower case hexadecimal value with
			zero padding
checksum	8	Checksum for this write block, encoded as a lower case
			hexadecimal number with leading zeros
eoh		1	End of header value, which must be the newline (line
			feed) character.

Blackbox blocks are organized into erase blocks. All erase blocks hold the
same number number of blackbox write blocks and are aligned on a boundary that
is a mutiple of the erase block size. A device will have one or more erase
blocks. Eraseblocks manage erasure of the write blocks they contain. Sequential
write blocks within an erase block are at increasing logical offsets within
the blockbox device.

Overlaps
--------
In order to avoid uncessary data movement of partial blocks, the data from
one write block may overlap the data in one succeeding write block. The data
from the write block with the lower offset takes precedence over the data it
overlaps.

Values that can be read with ioctl()
------------------------------------
o	The byte value this device uses when erasing write blocks
o	Size of write blocks
o	Number of bytes of metadata per write block
o	Number of write blocks per erase block
o	Boolean indicating whether this device requires write blocks must be erased
	(along with the other write blocks in its containing erase block)

Early Invocation
----------------
The basic Blackbox driver infrastructure is designed to be available from very
early in the kernel initialization. At first blush, this might not seem to make
sense, since if the kernel crashes early on one boot, it will probably crash
early on the next, and logged data can never be retrieved. There are,
fortunately, two solutions to retrieving the data:

o	External hardware: Use of a JTAG or other debugger allows reading
	memory at any point and so it can retrieve the log.
o	Fallback kernel: in fault tolerant systems, there may be one or more
	fallback kernels. Best practices dictate that there always be a
	kernel that is known to work which will automatically boot in the case
	that a replacement kernel fails to boot properly. So long as both
	kernels are configured with Blackbox storage in the same location, the
	fallback kernel will be able to read the failure data from the new
	kernel.

The Blackbox kernel parmeter
----------------------------
The Blackbox drivers can be configured as on the command line:

<blackbox-param> ::=	blackbox "=" <device-specs>

<device-specs> ::=	<device-spec>
			| <device-spec> "," <device-specs>

<device-spec> :==	<device-name> ":" <size> "@" <offset>

<device-name> ::=	<device-char>
			| <device-char> <device-name>

<device-char> ::=	any ASCII character but "/", ":", "@", and "\0"

<size> ::=		<number>

<offset> ::=		<number>

<number> ::=		<digits>
			| <digits> <multiplier>

<digits> ::=		<hex-digits>
			| <decimal-digits>

<hex-digits> ::=	"0x" <hex-chars>

<hex-chars> ::=		<hex-char>
			| <hex-char> <hex-chars>

<hex-chars> ::=		"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
			| "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f"
			| "A" | "B" | "C" | "D" | "E" | "F"

<decimal-digits> ::=	= <decimal_chars>

<decimal-chars>	::=	"0" | "1" | "2" | "3" | "4" | "5" | "6" | "7"
			| "8" | "9"

<multiplier>	::=	"k" | "K" | "m" | "M" | "g" | "G" | "t" | "T" 

The effect of a <multiplier> is to multiply the given <number> by:
1024		for "k" and "K"
1048576		for "m" and "M"
1073741824	for "g" and "G"
1099511627776	for "t" and "T"

<device-name> must match one of the device names registered by a blackbox
driver and must not be more than 15 <device-char>s long.

Thought the interpretation of <size> as a byte count is straight-forward,
the interpretation is <offset> is device-dependent. So:

Device type	Interpretation
-----------	--------------
RAM		Physical address
NAND		Offset within a logical NAND device, which may be a
		concatenation or subset of a physical NAND device

FIXME: need to define device tree parameters, too, for architectures that
support it.

Gotchas
-------
1.	Be sure to work with your bootloader. If RAM is used for Blackbox
	storage, the bootloader must know to reserve that section of RAM
	during boot and not overwrite it.

