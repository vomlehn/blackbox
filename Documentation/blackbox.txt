Blackbox - crash logging
------------------------
At the top level, a fixed-size concatenation of storage space one or more
devices of the same device type. Each device is represented by two entries
in /dev:

blackbox<n>
	The <n>th blackbox device can be read at any valid offset and for
	any length. There may be one or more sections of the device that
	can't be read due to detection of data corruption. It will support
	detection and skipping of corrupted data through use of a mechanism
	like ioctl(GET_LBA_STATUS), used for SCSI disks, or the lseek
	SEEK_DATA/SEEK_HOLE mechanism.

blackboxraw<n>
	In some cases it is useful to retrieve the raw bits and metadata
	for the blocks in a blackbox device. For the device, the data
	in the block box consists of an alternating sequence of data
	blocks and metadata blocks. The data blocks are the data read from
	the device without application of error correction metatdata.  The
	metadata blocks may contain zero or more bytes of data whose format
	is dependent on the underlying device implementing the blackbox
	device. It is device dependent whether it contains any error checking
	and correction (ECC) data.

	This device is record oriented. Thus, if a read is performed on
	a data or metadata block specifying fewer bytes than are available,
	Any remaining bytes in that block are discarded and the next read
	will return data starting at the beginning of the next block. If
	the underlying device does not supply any metadata, successive
	reads will return successive data blocks; there are no zero-length
	metadatablocks.

	The device supports queries for the maximum record sizes of data and
	metadata blocks. The data returned is struct blackbox_recsize:

		struct blackbox_recsize {
			off_t	data_size;
			off_t	metadata_size;
		};
	
	The ioctl number is BBIOC_RECSIZE.
	
Each blackbox device is made of write blocks. There may be as few as 1
or there may be many. Each blackbox write block starts with a metadata section
describing that block.

Each write block starts with a header that describes the data in the write block.
If the device requires write blocks be erased prior to writing new data, there
is only one header. If the device does not require erasing before writing, there
are two headers, both of which have the same structure. Only one of the two
headers is modified at a time. If the system fails during a header write, that
header will be invalid, which is detected with a checksum, but the other header
will still be valid, allowing the data to be retrieved.

All fields in the header are printable so that, if the data stored is printable,
it is easy to review the data in the device. This includes checksums. Algorithms
for validating checksums frequently involve computations on the entire block,
including the checksum. Since the checksum value has been converted to a printable
value, the usual approach doesn't apply. Instead, all fields except for the checksum
are included in the checksum as printable characters. The checksum itself is
the converted to binary and processed with the checksum algorithm.

The following table describes the header fields. The data is stored in the order
in which it appears in the table.

Field			Size	Description
			(bytes)
-----------------------	-------	-------------------------------------------------------

sequence_number		64	A monotonically increasing value, starting at one,
				encoded as a lower case hexadecimal value with leading
				zero padding
version			1	Version of this data, a value from "00" to "99"
offset			32	Logical offset within the blackbox device of this block,
				encoded as a leading zero-padded, lower case hexadecimal
				value
size			8	Number of bytes of data written to this block, encoded
				as a lower case hexadecimal value with zero padding
checksum		8	Checksum for this write block, encoded as a lower case
				hexadecimal number with leading zeros
eoh			1	End of header value, which must be the newline (line
				feed) character.

Blackbox blocks are organized into erase blocks. All erase blocks hold the
same number number of blackbox write blocks and are aligned on a boundary that
is a mutiple of the erase block size. A device will have one or more erase blocks.

Values that can be read with ioctl()
------------------------------------
o	The byte value this device uses when erasing write blocks
o	Size of write blocks
o	Number of bytes of metadata per write block
o	Number of write blocks per erase block
o	Boolean indicating whether this device requires write blocks must be erased
	(along with the other write blocks in its containing erase block)
